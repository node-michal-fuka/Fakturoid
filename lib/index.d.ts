import Client from './Client';
import { Account, BankAccount, Expense, ExpenseFilter, Invoice, InvoiceFilter, InvoiceFireFilter, Search, NumberFormat, Subject, SubjectFilter, User, UserFilter, ExpenseFireFilter, GeneratorFilter, Generator, Message, Report, EventFilter, Event, InventoryItemFilter, InventoryItem, InventoryMove, InventoryMoveFilter, TodoFilter, Todo } from './Types';
export default class Fakturoid extends Client {
    getAccount(): Promise<Account>;
    getBankAccounts(): Promise<BankAccount[]>;
    getUser(id: string): Promise<User>;
    getUsers(filter?: Partial<UserFilter>): Promise<User[]>;
    getInvoices(filter?: Partial<InvoiceFilter>): Promise<Invoice[]>;
    getRegularInvoices(filter?: Partial<InvoiceFilter>): Promise<Invoice[]>;
    getProformaInvoices(filter?: Partial<InvoiceFilter>): Promise<Invoice[]>;
    getInvoice(id: string): Promise<Invoice>;
    getInvoicePdf(id: string): Promise<any>;
    searchInvoices(filter?: Partial<Search>): Promise<Invoice[]>;
    updateInvoice(id: string, data: Partial<Invoice>): Promise<Invoice>;
    fireInvoice(id: string, data: Partial<InvoiceFireFilter>): Promise<undefined>;
    createInvoice(invoice: Partial<Invoice>): Promise<Partial<Invoice>>;
    deleteInvoice(id: string): Promise<undefined>;
    getExpenses(filter?: Partial<ExpenseFilter>): Promise<Expense[]>;
    getExpense(id: string): Promise<Expense>;
    searchExpenses(filter?: Partial<Search>): Promise<Expense[]>;
    updateExpense(id: string, data: Partial<Expense>): Promise<Expense>;
    fireExpense(id: string, data: Partial<ExpenseFireFilter>): Promise<undefined>;
    createExpense(invoice: Partial<Expense>): Promise<Partial<Expense>>;
    deleteExpense(id: string): Promise<undefined>;
    getSubjects(filter?: Partial<SubjectFilter>): Promise<Subject[]>;
    getSubject(id: string): Promise<Subject>;
    createSubject(subject: Partial<Subject>): Promise<Partial<Subject>>;
    updateSubject(id: string, data: Partial<Subject>): Promise<Partial<Subject>>;
    deleteSubject(id: string): Promise<undefined>;
    searchSubjects(filter?: Partial<Search>): Promise<Subject[]>;
    getGenerators(filter?: Partial<GeneratorFilter>): Promise<Generator[]>;
    getTemplateGenerators(filter?: Partial<GeneratorFilter>): Promise<Generator[]>;
    getRecurringGenerators(filter?: Partial<GeneratorFilter>): Promise<Generator[]>;
    getGenerator(id: string): Promise<Generator>;
    updateGenerator(id: string, data: Partial<Generator>): Promise<Partial<Generator>>;
    createGenerator(generator: Partial<Generator>): Promise<Partial<Generator>>;
    deleteGenerator(id: string): Promise<undefined>;
    createMessage(invoiceId: number, message: Partial<Message>): Promise<Partial<Generator>>;
    getInvoiceNumberFormats(): Promise<NumberFormat[]>;
    getReports(year: number): Promise<Report>;
    getPaidReports(year: number): Promise<Report>;
    getVatReports(year: number): Promise<Report>;
    getEvents(filter?: Partial<EventFilter>): Promise<Event[]>;
    getPaidEvents(filter?: Partial<EventFilter>): Promise<Event[]>;
    getInventoryItems(filter?: Partial<InventoryItemFilter>): Promise<InventoryItem[]>;
    getArchivedInventoryItems(filter?: Partial<InventoryItemFilter>): Promise<InventoryItem[]>;
    getInventoryItem(id: string): Promise<InventoryItem>;
    searchInventoryItems(filter?: Partial<Search>): Promise<InventoryItem[]>;
    archiveInventoryItem(id: string): Promise<any>;
    unarchiveInventoryItem(id: string): Promise<any>;
    updateInventoryItem(id: string, data: Partial<InventoryItem>): Promise<Partial<InventoryItem>>;
    createInventoryItem(generator: Partial<InventoryItem>): Promise<Partial<InventoryItem>>;
    deleteInventoryItem(id: string): Promise<undefined>;
    getInventoryMoves(filter?: Partial<InventoryMoveFilter>): Promise<InventoryMove[]>;
    getInventoryMove(inventoryItemId: string, id: string): Promise<InventoryMove>;
    updateInventoryMove(inventoryItemId: string, id: string, data: Partial<InventoryMove>): Promise<Partial<InventoryMove>>;
    createInventoryMove(inventoryItemId: string, inventoryMove: Partial<InventoryMove>): Promise<Partial<InventoryMove>>;
    deleteInventoryMove(inventoryItemId: string, id: string): Promise<undefined>;
    getTodos(filter?: Partial<TodoFilter>): Promise<Todo[]>;
}
